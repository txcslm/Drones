#pragma kernel ClearTex
#pragma kernel UpdateTex

RWTexture2D<float4>   _Tex;
StructuredBuffer<int> _Explored;
StructuredBuffer<int> _Nodes;
int                   _Width;
int                   _BytesPerNode;
half                  _FadeOutSpeed;
half                  _FadeInSpeed;
half                  _DeltaTime;
half                  _UseFade;

inline int CoordsToValue(uint3 pos, StructuredBuffer<int> buffer)
{
    int byteIndex = pos.y * _Width + pos.x * _BytesPerNode;
    int intIndex = byteIndex * 0.25;
    int offsetMask = 3;
    int offset = byteIndex & offsetMask;
    int arrValue = buffer[intIndex];
    int value = arrValue >> 8 * offset & 255;
    return value;
}

inline int IsExplored(uint3 pos)
{
    return CoordsToValue(pos, _Explored) > 0;
}

inline int IsVisible(uint3 pos)
{
    return CoordsToValue(pos, _Nodes) > 0;
}

[numthreads(4,4,1)]
void ClearTex(uint3 id : SV_DispatchThreadID)
{
    _Tex[id.xy] = 0.0;
}

[numthreads(4,4,1)]
void UpdateTex(uint3 id : SV_DispatchThreadID)
{
    float r = _Tex[id.xy].r;
    float g = _Tex[id.xy].g;
    int   isVisible = IsVisible(id);
    float rFaded = lerp(r + (0 - r) * _DeltaTime * _FadeOutSpeed, r + (1 - r) * _DeltaTime * _FadeInSpeed, isVisible);
    r = lerp(isVisible, rFaded, _UseFade);
    int isExplored = IsExplored(id);
    g = lerp(g, lerp(1, g = g + (1 - g) * _DeltaTime * _FadeInSpeed, _UseFade), isExplored);
    _Tex[id.xy] = float4(r, g, 0, 0);
}